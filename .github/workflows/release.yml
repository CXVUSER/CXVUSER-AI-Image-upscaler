
name: release
on:
  release:
    types: [published] # This workflow will only run when a new release is published

env:
  APPLICATION_NAME: gfpgan-ncnn-vulkan

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      APPNAME: ${{ steps.get_appname.outputs.APPNAME }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-appname
      id: get_appname
      run: echo ::set-output name=APPNAME::${APPLICATION_NAME}
    - name: get-version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

  ubuntu:
    needs: [setup]
    runs-on: ubuntu-latest
    env:
      PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-ubuntu
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: cache-vulkansdk
      id: cache-vulkansdk
      uses: actions/cache@v4
      with:
        path: "1.3.239.0"
        key: vulkansdk-linux-x86_64-1.3.239.0
    - name: vulkansdk
      if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
      run: |
        wget https://sdk.lunarg.com/sdk/download/1.3.239.0/linux/vulkansdk-linux-x86_64-1.3.239.0.tar.gz?Human=true -O vulkansdk-linux-x86_64-1.3.239.0.tar.gz
        tar -xf vulkansdk-linux-x86_64-1.3.239.0.tar.gz
        rm -rf 1.3.239.0/source 1.3.239.0/samples
        find 1.3.239.0 -type f | grep -v -E 'vulkan|glslang' | xargs rm
    - name: build
      run: |
        sudo apt update
        sudo apt install libopencv-dev python3-opencv -y
        export VULKAN_SDK=`pwd`/1.3.239.0/x86_64
        mkdir build && cd build
        cmake ../src
        cmake --build . -j 2
    - name: package
      run: |
        mkdir -p ${{ env.PACKAGENAME }}
        cp README.md LICENSE ${{ env.PACKAGENAME }}
        cp build/${{ needs.setup.outputs.APPNAME }} ${{ env.PACKAGENAME }}
        strip -g ${{ env.PACKAGENAME }}/${{ needs.setup.outputs.APPNAME }}
        cp -r models/* ${{ env.PACKAGENAME }}
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip


  release:
    needs: [setup, ubuntu]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v6
      with:
        path: artifacts

    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.setup.outputs.VERSION }}
        release_name: Release ${{ needs.setup.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: upload-ubuntu
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-ubuntu
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip
